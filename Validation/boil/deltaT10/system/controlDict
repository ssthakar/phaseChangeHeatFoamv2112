/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application                interPhaseChangeFoam;

startFrom                  latestTime;

startTime                  0;

stopAt                     endTime;

endTime                    1;

deltaT                     1e-06;

writeControl               adjustableRunTime;

writeInterval              0.02;

purgeWrite                 0;

writeFormat                ascii;

writePrecision             8;

writeCompression           compressed;

timeFormat                 general;

runTimeModifiable          yes;

adjustTimeStep             on;

maxCo                      0.1;
maxAlphaCo      	   0.1;

maxDeltaT       0.1;

 

functions
{

    // *********************************************************************** //
    // *** coded functionObject for calculating Berenson number ************** //
    // *********************************************************************** //

    NusseltNumber // calculates Berenson,Klimenko and Simulation Nusselt number
    {
      libs ("libutilityFunctionObjects");
      enabled true;
      type coded;
      //region fluid;
      name  NusseltNumber;
      writeControl runTime; 
      writeInterval 0.01;
      // args to pass to compiler 
      codeOptions
      #{
      #};
      // include 
      codeInclude
      #{
        #include "OFstream.H"
      #};
      // local data
      codeData
      #{
        autoPtr<OFstream> filePtr;
      #};
      codeRead
      #{
        filePtr.reset(new OFstream("test.dat"));
      #};
      codeExecute
      #{
        // declare local constants 
        scalar sigma_ = 0.10; // surface tension between liquid and interface 
        scalar rhog_ = 5; // density of gas
        scalar rhol_ = 200; // density of liquid
        scalar g_ = 9.81;
        scalar Hlg_ = 100e3; // latent heat of vaporization
        scalar kg_ = 1; // thermal conductivity of the gas phase
        scalar mug_ = 0.005;
        scalar DT_ = 5; // overheat
        scalar Cpg_ = 200;

        // critical Taylor wavelenght 
        scalar lambda_ = sqrt( sigma_/((rhol_-rhog_)*g_) ); 
        
				// get curent Temperature Field
        const volScalarField& T
        (
          mesh().lookupObject<volScalarField>("T") 
        );
				
				// compute Berenson's correlation number
				scalar Nub_ = 0.425*pow(((rhog_*(rhol_-rhog_)*g_*Hlg_)/(kg_*mug_*abs(DT_))),0.25)*pow(lambda_,0.75);
				Info << "Berenson's correlation number = " << Nub_ << endl; 
				
				// Compute Klimenko's correlation number
				scalar Beta_ = Cpg_ * DT_ / Hlg_;
				scalar Pr_ = Cpg_ * mug_ / kg_;
				scalar Gr_ = pow(rhog_,2)*g_*pow(lambda_,3)/pow(mug_,2)*(rhol_/rhog_-1);
				scalar Nuk_ = 0.19*pow(Gr_,0.33333333)*pow(Pr_,0.333333)*0.89*pow(Beta_,-0.333333);
				Info << "Klimenko's correlation number = " << Nuk_ << endl; 
				label down = mesh().boundary().findPatchID("down");
				
				// define Numerical Nusselt number
				volScalarField Nusselt
				(
					IOobject
					(
							"Nusselt",
							mesh().time().timeName(),
							mesh(),
							IOobject::NO_READ,
							IOobject::AUTO_WRITE
					),
					mesh(),
					dimensionedScalar("Nusselt", dimless, 0.0)
				);
				Nusselt.boundaryFieldRef()[down] = lambda_/DT_*T.boundaryField()[down].snGrad();
				scalar area = gSum(mesh().magSf().boundaryField()[down]);
				scalar avgNusselt = gSum(Nusselt.boundaryField()[down] * mesh().magSf().boundaryField()[down])/area;
				Info << "Space-averaged Nusselt lambda = " << avgNusselt << "\n" << endl;
				filePtr() << mesh().time().timeName() << " " << avgNusselt << " "<< Nub_ << " "<< Nuk_ << endl;
      #};
    }
}

// ************************************************************************* //
